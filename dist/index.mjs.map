{"version":3,"sources":["../src/SwipeGesture.tsx"],"names":[],"mappings":";AAAA,OAAO,SAAoB,cAAc;AACzC,SAAe,UAAU,oBAAqE","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { View, Animated, PanResponder, GestureResponderEvent, PanResponderGestureState } from 'react-native';\n\ninterface SwipeGestureProps {\n  gestureStyle?: any;  \n  children?: React.ReactNode;\n  onSwipePerformed: (direction: string) => void;\n}\n\nconst SwipeGesture = (props: SwipeGestureProps) => {\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: (evt: GestureResponderEvent, gestureState: PanResponderGestureState) => true,\n      onPanResponderRelease: (evt: GestureResponderEvent, gestureState: PanResponderGestureState) => {\n        const x = gestureState.dx;\n        const y = gestureState.dy;\n        if (Math.abs(x) > Math.abs(y)) {\n          if (x >= 0) {\n            props.onSwipePerformed('right');\n          } else {\n            props.onSwipePerformed('left');\n          }\n        } else {\n          if (y >= 0) {\n            props.onSwipePerformed('down');\n          } else {\n            props.onSwipePerformed('up');\n          }\n        }\n      }\n    })\n  ).current;\n\n  return (\n    <Animated.View {...panResponder.panHandlers} style={props.gestureStyle}>\n      {props.children} \n    </Animated.View>\n  );\n};\n\nexport default SwipeGesture;\n"]}