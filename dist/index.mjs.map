{"version":3,"sources":["../src/SwipeGesture.tsx"],"names":[],"mappings":";AAAA,OAAO,SAAoB,cAAc;AACzC,SAAe,UAAU,oBAAqE;AAQ9F,IAAM,eAAe,CAAC,UAA6B;AACjD,QAAM,eAAe;AAAA,IACnB,aAAa,OAAO;AAAA,MAClB,8BAA8B,CAAC,KAA4B,iBAA2C;AAAA,MACtG,uBAAuB,CAAC,KAA4B,iBAA2C;AAC7F,cAAM,IAAI,aAAa;AACvB,cAAM,IAAI,aAAa;AACvB,YAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG;AAC7B,cAAI,KAAK,GAAG;AACV,kBAAM,iBAAiB,OAAO;AAAA,UAChC,OAAO;AACL,kBAAM,iBAAiB,MAAM;AAAA,UAC/B;AAAA,QACF,OAAO;AACL,cAAI,KAAK,GAAG;AACV,kBAAM,iBAAiB,MAAM;AAAA,UAC/B,OAAO;AACL,kBAAM,iBAAiB,IAAI;AAAA,UAC7B;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,EAAE;AAEF,SACE,oCAAC,SAAS,MAAT,EAAe,GAAG,aAAa,aAAa,OAAO,MAAM,gBACvD,MAAM,QACT;AAEJ;AAEA,IAAO,uBAAQ","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { View, Animated, PanResponder, GestureResponderEvent, PanResponderGestureState } from 'react-native';\n\ninterface SwipeGestureProps {\n  gestureStyle?: any;  \n  children?: React.ReactNode;\n  onSwipePerformed: (direction: string) => void;\n}\n\nconst SwipeGesture = (props: SwipeGestureProps) => {\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: (evt: GestureResponderEvent, gestureState: PanResponderGestureState) => true,\n      onPanResponderRelease: (evt: GestureResponderEvent, gestureState: PanResponderGestureState) => {\n        const x = gestureState.dx;\n        const y = gestureState.dy;\n        if (Math.abs(x) > Math.abs(y)) {\n          if (x >= 0) {\n            props.onSwipePerformed('right');\n          } else {\n            props.onSwipePerformed('left');\n          }\n        } else {\n          if (y >= 0) {\n            props.onSwipePerformed('down');\n          } else {\n            props.onSwipePerformed('up');\n          }\n        }\n      }\n    })\n  ).current;\n\n  return (\n    <Animated.View {...panResponder.panHandlers} style={props.gestureStyle}>\n      {props.children} \n    </Animated.View>\n  );\n};\n\nexport default SwipeGesture;\n"]}