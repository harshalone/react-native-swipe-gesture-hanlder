{"version":3,"sources":["../src/SwipeGesture.tsx"],"names":[],"mappings":";AAAA,OAAO,SAAS,cAAc;AAC9B,SAAS,MAAM,UAAU,oBAA+B;AAOxD,IAAM,eAA4C,CAAC,UAAU;AAC3D,QAAM,eAAe;AAAA,IACnB,aAAa,OAAO;AAAA,MAClB,8BAA8B,MAAM;AAAA,MACpC,uBAAuB,CAAC,GAAG,iBAAiB;AAC1C,cAAM,IAAI,aAAa;AACvB,cAAM,IAAI,aAAa;AACvB,YAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,GAAG;AAC7B,cAAI,KAAK,GAAG;AACV,kBAAM,iBAAiB,OAAO;AAAA,UAChC,OAAO;AACL,kBAAM,iBAAiB,MAAM;AAAA,UAC/B;AAAA,QACF,OAAO;AACL,cAAI,KAAK,GAAG;AACV,kBAAM,iBAAiB,MAAM;AAAA,UAC/B,OAAO;AACL,kBAAM,iBAAiB,IAAI;AAAA,UAC7B;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,EAAE;AAEF,SACE,oCAAC,SAAS,MAAT,EAAe,GAAG,aAAa,aAAa,OAAO,MAAM,gBACxD,oCAAC,YAAM,MAAM,QAAS,CACxB;AAEJ;AAEA,IAAO,uBAAQ","sourcesContent":["import React, { useRef } from 'react';\nimport { View, Animated, PanResponder, ViewStyle } from 'react-native';\n\ninterface SwipeGestureProps {\n  gestureStyle?: ViewStyle;\n  onSwipePerformed: (direction: 'up' | 'down' | 'left' | 'right') => void;\n}\n\nconst SwipeGesture: React.FC<SwipeGestureProps> = (props) => {\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderRelease: (_, gestureState) => {\n        const x = gestureState.dx;\n        const y = gestureState.dy;\n        if (Math.abs(x) > Math.abs(y)) {\n          if (x >= 0) {\n            props.onSwipePerformed('right');\n          } else {\n            props.onSwipePerformed('left');\n          }\n        } else {\n          if (y >= 0) {\n            props.onSwipePerformed('down');\n          } else {\n            props.onSwipePerformed('up');\n          }\n        }\n      }\n    })\n  ).current;\n\n  return (\n    <Animated.View {...panResponder.panHandlers} style={props.gestureStyle}>\n      <View>{props.children}</View>\n    </Animated.View>\n  );\n};\n\nexport default SwipeGesture;\n"]}